<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Linq;
using System.Collections.Generic;
<#
    const string derivationSalt = "kNHAimZpgjey5QllJZE5";
#>

namespace Msv.Licensing.Common
{
	public class EncryptionKeyDeriver : IEncryptionKeyDeriver
	{
		[Obfuscation(Exclude = true)]
		public dynamic Derive(dynamic publicKey)
		{
			using (dynamic sha256 = new SHA256CryptoServiceProvider())
			{
				var keyHash = sha256.ComputeHash(sha256.ComputeHash((byte[])publicKey));
				dynamic key = new byte[0];
<#
for (var i = 0; i < derivationSalt.Length / 2; i++)
{
#>
				key = HashPart("<#=derivationSalt.Substring(i, 2)#>", sha256, key, keyHash[int.Parse("<#=derivationSalt[i] % 32#>")]);
<#
}
#>
				return HashPart(string.Empty, sha256, key, keyHash[int.Parse("10")]);
			}
		}

		[Obfuscation(Exclude = true)]
		private static dynamic HashPart(string value, HashAlgorithm hasher, dynamic current, byte keyPart)
			=> hasher.ComputeHash(Encoding.UTF8.GetBytes(value + keyPart.ToString("x2")).Concat((IEnumerable<byte>)current).ToArray());
	}
}