@using Msv.AutoMiner.Common.Enums
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.FrontEnd.Models.Pools
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model PoolDisplayModel

@{
    const int minWorkers = 3;

    var minTtf = TimeSpan.FromSeconds(2);
    var maxTtf = TimeSpan.FromHours(8);
    var warningTtf = TimeSpan.FromHours(2);

    string rowClass;
    string title;
    if (Model.Activity == ActivityState.Inactive)
    {
        rowClass = "text-muted";
        title = "Pool is inactive";
    }
    else if (!Model.HasApi)
    {
        rowClass = "danger";
        title = "There is no API providing state information for this pool";
    }
    else if (Model.ResponsesStoppedDate != null)
    {
        rowClass = "danger";
        title = "Pool stopped responding " + DateTimeHelper.ToRelativeTime(Model.ResponsesStoppedDate.Value);
    }
    else if (Model.LastUpdated == null || Model.LastUpdated < DateTime.UtcNow - TimeSpan.FromMinutes(40))
    {
        rowClass = "warning";
        title = "Pool data is unavailable or obsolete";
    }
    else
    {
        rowClass = null;
        title = null;
    }
}

<tr class="@rowClass" title="@title" data-pool-id="@Model.Id" data-pool-name="@Model.Name">
    <td class="space-no-wrap">
        <small>
            <a asp-controller="PoolPayments" asp-action="Index" asp-route-currencyId="@Model.Coin.Id"
               title="Show pool payments for this coin">
                @await Component.InvokeAsync("LogoCoinName", new LogoCoinNameModel(Model.Coin.Name, Model.Coin.Logo))
            </a>
        </small>
    </td>
    <td>
        @if (Model.UseBtcWallet)
        {
            <img src="~/images/bitcoin-exchange.png" 
                 alt="BitCoin" width="16" height="16"
                 title="Pool with automatic conversion to BitCoin" />
        }
        <small>
            <a asp-controller="PoolPayments" asp-action="Index" asp-route-poolId="@Model.Id"
               title="Show payments for this pool">
                @Model.Name
            </a>
        </small>
        @if (Model.Activity == ActivityState.Active)
        {
            <div>
                @if (Model.PoolWorkers == 0)
                {
                    <span class="label label-danger">No workers</span>
                }
                else if (!Model.IsSolo && Model.PoolWorkers < minWorkers)
                {
                    <span class="label label-warning">Few workers</span>
                }
                @if (Model.TimeToFind < minTtf)
                {
                    <span class="label label-warning">Strange TTF</span>
                }
                @if (Model.TimeToFind > maxTtf)
                {
                    <span class="label label-danger">Long TTF</span>
                }
                else if (Model.TimeToFind > warningTtf)
                {
                    <span class="label label-warning">Longish TTF</span>
                }
                @if (Model.ResponsesStoppedDate != null)
                {
                    <span class="label label-danger">No response</span>
                }
            </div>
        }
    </td>
    <td>@Model.Fee.ToString("F2")%</td>
    <td msv-balance="@Model.ConfirmedBalance" msv-btc-price="@(Model.UseBtcWallet ? 1 : Model.CoinBtcPrice)"></td>
    <td msv-balance="@Model.UnconfirmedBalance" msv-btc-price="@(Model.UseBtcWallet ? 1 : Model.CoinBtcPrice)"></td>
    <td class="space-no-wrap">@(Model.PoolHashRate > 0 ? ConversionHelper.ToHashRateWithUnits(Model.PoolHashRate, Model.Coin.Algorithm.KnownValue) : "N/A")</td>
    <td>@Model.PoolWorkers</td>
    <td class="space-no-wrap">@TimeSpanHelper.ToShortString(Model.TimeToFind)</td>
    <td msv-absolute-date="@Model.LastUpdated"></td>
    <td>
        <ul class="list-inline">
            <li>
                <a class="btn btn-xs btn-primary" asp-action="Edit" asp-route-id="@Model.Id" title="Edit pool">
                    <i class="glyphicon glyphicon-edit"></i>
                </a>
            </li>
            <li>
                <a class="btn btn-xs btn-info" asp-action="Clone" asp-route-originalId="@Model.Id" title="Clone pool">
                    <i class="fa fa-files-o" aria-hidden="true"></i>
                </a>
            </li>
            <li>
                @{
                    var activationButtonTitle = Model.Activity == ActivityState.Active
                        ? "Disable pool"
                        : "Enable pool";
                }
                <button class="btn btn-xs btn-info"
                        title="@activationButtonTitle"
                        data-disable-url="@Url.Action("ToggleActive", new {id = Model.Id})">
                    @if (Model.Activity == ActivityState.Active)
                    {
                        <i class="glyphicon glyphicon-remove"></i>
                    }
                    else if (Model.Activity == ActivityState.Inactive)
                    {
                        <i class="glyphicon glyphicon-flash"></i>
                    }
                </button>
            </li>
            <li>
                <button class="btn btn-xs btn-danger"
                        title="Delete pool"
                        data-delete-url="@Url.Action("Delete", new {id = Model.Id})">
                    <i class="glyphicon glyphicon-trash"></i>
                </button>
            </li>
        </ul>
    </td>
</tr>