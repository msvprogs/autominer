@using Microsoft.AspNetCore.Http.Extensions
@model Msv.AutoMiner.FrontEnd.Models.Shared.PaginationModel

@functions {
    private const string PageParameterKey = "page";

    private string CreatePageUrl(int pageId)
    {
        var request = ViewContext.HttpContext.Request;
        var queryBuilder = new QueryBuilder(request.Query
            .Where(x => !PageParameterKey.Equals(x.Key, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => new KeyValuePair<string, string>(x.Key, x.Value.First())))
        {
            {PageParameterKey, pageId.ToString()}
        };

        return request.Path.Add(queryBuilder.ToQueryString());
    }
}    

<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (Model.CurrentPage == 1)
        {
            <li class="disabled">
                <a aria-label="Previous" href="#">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        else
        {
            <li>
                <a aria-label="Previous" href="@CreatePageUrl(Model.CurrentPage - 1)">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
        }
        
        @{
            var pageIndexes = Enumerable.Range(1, Model.StartEndPages)
                .Union(Enumerable.Range(Model.TotalPages - Model.StartEndPages + 1, Model.StartEndPages))
                .Union(Enumerable.Range(Model.CurrentPage - Model.PagesAroundActive, Model.PagesAroundActive * 2 + 1))
                .Where(x => x > 0 && x <= Model.TotalPages)
                .OrderBy(x => x)
                .ToArray();
        }

        @for (var i = 0; i < pageIndexes.Length; i++)
        {
            <li class="@(pageIndexes[i] == Model.CurrentPage ? "active" : "")">
                <a href="@CreatePageUrl(pageIndexes[i])">@pageIndexes[i]</a>
            </li>
            if (i < pageIndexes.Length - 1 && pageIndexes[i + 1] - pageIndexes[i] > 1)
            {
                <li class="disabled">
                    <a href="#">
                        <span aria-hidden="true">...</span>
                    </a>
                </li>
            }
        }

        @if (Model.CurrentPage == Model.TotalPages)
        {
            <li class="disabled">
                <a aria-label="Next" href="#">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
        else
        {
            <li>
                <a aria-label="Next" href="@CreatePageUrl(Model.CurrentPage + 1)">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        }
    </ul>
</nav>