@using Msv.AutoMiner.Common.Data.Enums
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model Msv.AutoMiner.FrontEnd.Models.Wallets.WalletDisplayModel[]

@{   
    const double minWarningVolume = 0.1;
    const double minVolume = 0.01;
}

@foreach (var wallet in Model.OrderBy(x => x.Coin.Name).ThenByDescending(x => x.IsMiningTarget))
{
    string rowClass;
    string title;
    if (wallet.Activity == ActivityState.Inactive)
    {
        rowClass = "text-muted";
        title = "Wallet is inactive";
    }
    else if (wallet.LastUpdated == null || wallet.LastUpdated < DateTime.UtcNow - TimeSpan.FromMinutes(50))
    {
        rowClass = "warning";
        title = "Wallet data is unavailable or obsolete";
    }
    else
    {
        rowClass = null;
        title = null;
    }

    <tr class="@rowClass" title="@title" data-wallet-name="@wallet.Address" data-coin-name="@wallet.Coin.Name" data-coin-id="@wallet.Coin.Id">
        <td data-order="@wallet.Coin.Name" data-search="@wallet.Coin.Name + @wallet.Coin.Symbol">
            <a asp-controller="WalletOperations" asp-action="Index" asp-route-currencyId="@wallet.Coin.Id"
               title="Show all operations for @wallet.Coin.Name wallets">
                @await Component.InvokeAsync("LogoCoinName", new LogoCoinNameModel(wallet.Coin.Name, wallet.Coin.Symbol, wallet.Coin.Logo))
            </a>
            <div>
                @if (wallet.IsInactive)
                {
                    <span class="label label-danger">Wallet maintenance</span>
                }
                else if (wallet.LastDayVolume < minWarningVolume)
                {
                    <span class="label label-danger">Low volume</span>
                }
                else if (wallet.LastDayVolume < minVolume)
                {
                    <span class="label label-warning">Lowish volume</span>
                }
            </div>
        </td>
        <td data-search="@wallet.Address" class="text-right space-no-wrap">
            @if (wallet.IsMiningTarget)
            {
                <img src="~/images/mining-icon.png" alt="Mining target" width="16" height="16"
                     title="This wallet is mining target for its coin" />
            }
            @await Component.InvokeAsync("LongId", new LongIdModel
            {
                Id = wallet.Address
            })
            <div class="list-inline text-right small">
                <a asp-controller="WalletOperations" asp-action="Index" asp-route-walletId="@wallet.Id"
                   title="Show all operations for this wallet">
                    <i class="fa fa-link" aria-hidden="true"></i> Operations
                </a>
                @if (wallet.BlockExplorerUri != null)
                {
                    @: &nbsp; &nbsp;
                    <a href="@wallet.BlockExplorerUri" title="Show block explorer page for this wallet">
                        <i class="fa fa-external-link" aria-hidden="true"></i> Block explorer
                    </a>
                }
            </div>
        </td>
        <td>
            <a asp-controller="WalletOperations" asp-action="Index" asp-route-exchange="@wallet.ExchangeType"
               title="Show all operations for exchange @wallet.ExchangeType">
                @(wallet.ExchangeType != null ? wallet.ExchangeType.ToString() : "<local>")
            </a>
            @if (wallet.LastDayVolume != null)
            {
                <div class="secondary-info">
                    24h vol: <b>@wallet.LastDayVolume.Value.ToString("N3") BTC</b>
                </div>
            }
        </td>
        <td data-order="@wallet.Available.ToDataOrderBtc(wallet.CoinBtcPrice)" msv-balance="@wallet.Available" msv-btc-price="@wallet.CoinBtcPrice"></td>
        <td data-order="@wallet.Blocked.ToDataOrderBtc(wallet.CoinBtcPrice)" msv-balance="@wallet.Blocked" msv-btc-price="@wallet.CoinBtcPrice"></td>
        <td data-order="@wallet.Unconfirmed.ToDataOrderBtc(wallet.CoinBtcPrice)" msv-balance="@wallet.Unconfirmed" msv-btc-price="@wallet.CoinBtcPrice"></td>
        <td data-order="@wallet.LastUpdated.ToDataOrder()" msv-absolute-date="@wallet.LastUpdated"></td>
        <td>
            <ul class="list-inline">
                <li>
                    <a class="btn btn-xs btn-primary" asp-action="Edit" asp-route-id="@wallet.Id" title="Edit wallet">
                        <i class="glyphicon glyphicon-edit"></i>
                    </a>
                </li>
                <li>
                    @{
                        var activationButtonTitle = wallet.Activity == ActivityState.Active
                            ? "Disable wallet"
                            : "Enable wallet";
                    }
                    <button class="btn btn-xs btn-info"
                            title="@activationButtonTitle"
                            data-disable-url="@Url.Action("ToggleActive", new {id = wallet.Id})">
                        @if (wallet.Activity == ActivityState.Active)
                        {
                            <i class="glyphicon glyphicon-remove"></i>
                        }
                        else if (wallet.Activity == ActivityState.Inactive)
                        {
                            <i class="glyphicon glyphicon-flash"></i>
                        }
                    </button>
                </li>
                @if (!wallet.IsMiningTarget)
                {
                    <li>
                        <button class="btn btn-xs btn-info"
                                title="Set as mining target"
                                data-set-as-target-url="@Url.Action("SetAsMiningTarget", new {id = wallet.Id})">
                            <i class="glyphicon glyphicon-flag"></i>
                        </button>
                    </li>
                }
                <li>
                    <button class="btn btn-xs btn-danger"
                            title="Delete wallet"
                            data-delete-url="@Url.Action("Delete", new {id = wallet.Id})">
                        <i class="glyphicon glyphicon-trash"></i>
                    </button>
                </li>
            </ul>
        </td>
    </tr>
}