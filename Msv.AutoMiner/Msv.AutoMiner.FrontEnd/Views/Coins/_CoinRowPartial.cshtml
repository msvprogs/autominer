@using Msv.AutoMiner.Common
@using Msv.AutoMiner.Common.Data.Enums
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.Data
@using Msv.AutoMiner.FrontEnd.Models.Coins
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model CoinDisplayModel

@{
    string rowClass;
    string title;
    if (Model.Activity == ActivityState.Inactive)
    {
        rowClass = "text-muted";
        title = "Coin is inactive";
    }
    else if (Model.LastUpdated == null || Model.LastUpdated < DateTime.UtcNow - TimeSpan.FromMinutes(30))
    {
        rowClass = "warning";
        title = "Coin network data is unavailable or obsolete";
    }
    else
    {
        rowClass = null;
        title = null;
    }
}

<tr class="@rowClass" title="@title" data-coin-id="@Model.Id" data-coin-name="@Model.Name">
    <td class="text-center" data-order="@Model.NetworkStatus.ToDataOrderByValue()">
        @{
            string circleClass;
            switch (Model.NetworkStatus)
            {
                case CoinNetworkStatus.Ok:
                    circleClass = "text-success";
                    break;
                case CoinNetworkStatus.Warning:
                    circleClass = "text-warning";
                    break;
                case CoinNetworkStatus.Error:
                    circleClass = "text-danger";
                    break;
                default:
                    circleClass = "text-muted";
                    break;
            }
        }
        <i class="fa fa-circle @circleClass" title="@Model.NetworkStatus"></i>
        <div class="small" msv-absolute-date="@Model.LastUpdated"></div>
    </td>
    <td class="space-no-wrap small" data-order="@Model.Name" data-search="@Model.Name">
        @await Component.InvokeAsync("LogoCoinName", new LogoCoinNameModel(Model.Name, null, Model.Logo))
        @if (Model.MasternodeCount != null)
        {
            <div class="secondary-info">Masternodes: <b>@Model.MasternodeCount</b></div>
        }
        @if (Model.TotalSupply != null)
        {
            <div class="secondary-info">Total supply: <b>@Model.TotalSupply.Value.ToString("N0")</b></div>
        }
        @if (Model.SoloMiningTtf != null)
        {
            <div class="secondary-info">Solo-mine TTF: <b>@TimeSpanHelper.ToShortString(Model.SoloMiningTtf)</b></div>
        }
        @if (Model.LastNetworkInfoResult != null && Model.LastNetworkInfoResult != CoinLastNetworkInfoResult.Success)
        {
            var labelClass = Model.NetworkStatus == CoinNetworkStatus.Warning
                ? "label-warning"
                : "label-danger";

            <span class="label @labelClass">
                @EnumHelper.GetCaption(Model.LastNetworkInfoResult.Value)
            </span>
        }
        @if (Model.LastNetworkInfoMessage != null)
        {
            <div class="coin-info-message" title="@Model.LastNetworkInfoMessage">
                @Model.LastNetworkInfoMessage.Truncate(200)
            </div>
        }
    </td>
    <td>@Model.Symbol</td>
    <td>@Model.Algorithm.Name</td>
    <td data-order="@Model.Height">
        <a asp-action="Graph" asp-route-type="@GraphType.Height" asp-route-id="@Model.Id" title="Show height graph">
            @Model.Height
        </a>
        @if (Model.LastBlockTime != null)
        {
            <div class="secondary-info space-no-wrap" msv-absolute-date="@Model.LastBlockTime"></div>
        }
    </td>
    <td data-order="@Model.Difficulty.ToDataOrder()">
        <a asp-action="Graph" asp-route-type="@GraphType.Difficulty" asp-route-id="@Model.Id" title="Show difficulty graph">
            @(Model.Difficulty > 1e10 ? Model.Difficulty.ToString("E") : Model.Difficulty.ToString("0.###"))
        </a>
        <div class="small space-no-wrap">
            @if (Model.DifficultyDelta > 0)
            {
                <span class="positive-amount">
                    <i class="fa fa-caret-up" aria-hidden="true"></i>
                    @ConversionHelper.ToPercent(Model.DifficultyDelta)
                </span>
            }
            else if (Model.DifficultyDelta < 0)
            {
                <span class="negative-amount">
                    <i class="fa fa-caret-down" aria-hidden="true"></i>
                    @ConversionHelper.ToPercent(-Model.DifficultyDelta)
                </span>
            }
            else
            {
                <span class="text-muted">
                    <i class="fa fa-window-minimize" aria-hidden="true"></i>
                    @ConversionHelper.ToPercent(0)
                </span>
            }
        </div>
    </td>
    <td class="text-right" data-order="@Model.BlockReward.ToDataOrder()">
        <a asp-action="Graph" asp-route-type="@GraphType.Reward" asp-route-id="@Model.Id" title="Show reward graph">
            @Model.BlockReward.ToString("N2")
        </a>
    </td>
    <td>
        <table class="coin-price-table">
            @foreach (var price in Model.ExchangePrices.OrderByDescending(x => x.Price))
            {
                var priceRowClass = "highlight-on-hover";
                if (!price.IsActive)
                {
                    priceRowClass += " market-inactive";
                }
                if (price.Exchange == Model.MiningTargetExchange)
                {
                    priceRowClass += " mining-target-exchange";
                }
                var priceRowTitle = price.IsActive
                    ? $"Ask: {ConversionHelper.ToCryptoCurrencyValue(price.Ask)}, Bid: {ConversionHelper.ToCryptoCurrencyValue(price.Bid)}"
                    : "Market is inactive";
                <tr class="@priceRowClass" title="@priceRowTitle">
                    <th>@price.Exchange:</th>
                    <td class="space-no-wrap">
                        @ConversionHelper.ToCryptoCurrencyValue(price.Price)
                        @if (price.PriceDelta > 0)
                        {
                            <span class="positive-amount">
                                (+@ConversionHelper.ToPercent(price.PriceDelta))
                            </span>
                        }
                        else if (price.PriceDelta < 0)
                        {
                            <span class="negative-amount">
                                (@ConversionHelper.ToPercent(price.PriceDelta))
                            </span>
                        }
                        else
                        {
                            <span class="text-muted">
                                (@ConversionHelper.ToPercent(0))
                            </span>
                        }
                    </td>
                </tr>
            }
        </table>
    </td>
    <td>
        @if (Model.Symbol != "BTC")
        {
            <ul class="list-inline">
                <li>
                    <a class="btn btn-xs btn-primary" asp-action="Edit" asp-route-id="@Model.Id" title="Edit coin">
                        <i class="glyphicon glyphicon-edit"></i>
                    </a>
                </li>
                <li>
                    @{
                        var activationButtonTitle = Model.Activity == ActivityState.Active
                            ? "Disable coin"
                            : "Enable coin";
                    }
                    <button class="btn btn-xs btn-info"
                            title="@activationButtonTitle"
                            data-disable-url="@Url.Action("ToggleActive", new {id = Model.Id})">
                        @if (Model.Activity == ActivityState.Active)
                        {
                            <i class="glyphicon glyphicon-remove"></i>
                        }
                        else if (Model.Activity == ActivityState.Inactive)
                        {
                            <i class="glyphicon glyphicon-flash"></i>
                        }
                    </button>
                </li>
                @if (Model.HasLocalNode)
                {
                    <li>
                        <a class="btn btn-xs btn-info" asp-action="CreateConfigFile" asp-route-id="@Model.Id"
                           title="Create configuration file for local node">
                            <i class="fa fa-file-text-o" aria-hidden="true"></i>
                        </a>
                    </li>
                }
                <li>
                    <a class="btn btn-xs btn-info" asp-action="Export" asp-route-id="@Model.Id"
                       title="Export coin data to JSON file">
                        <i class="fa fa-upload" aria-hidden="true"></i>
                    </a>
                </li>
                <li>
                    <button class="btn btn-xs btn-danger"
                            title="Delete coin"
                            data-delete-url="@Url.Action("Delete", new {id = Model.Id})">
                        <i class="glyphicon glyphicon-trash"></i>
                    </button>
                </li>
            </ul>
        }
    </td>
</tr>