@using Msv.AutoMiner.Common.Enums
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model Msv.AutoMiner.FrontEnd.Models.Coins.CoinDisplayModel

@{
    string rowClass;
    string title;
    if (Model.Activity == ActivityState.Inactive)
    {
        rowClass = "text-muted";
        title = "Coin is inactive";
    }
    else if (Model.LastUpdated == null || Model.LastUpdated < DateTime.UtcNow - TimeSpan.FromMinutes(30))
    {
        rowClass = "warning";
        title = "Coin network data is unavailable or obsolete";
    }
    else
    {
        rowClass = null;
        title = null;
    }
}

<tr class="@rowClass" title="@title" data-coin-id="@Model.Id" data-coin-name="@Model.Name">
    <td class="space-no-wrap">
        @await Component.InvokeAsync("LogoCoinName", new LogoCoinNameModel(Model.Name, Model.Logo))
    </td>
    <td>@Model.Symbol</td>
    <td>@Model.Algorithm.Name</td>
    <td>@Model.Height</td>
    <td>@(Model.Difficulty > 1e10 ? Model.Difficulty.ToString("E") : Model.Difficulty.ToString("0.###"))</td>
    <td class="text-right">@Model.BlockReward.ToString("N2")</td>
    <td>
        <div class="coin-price-table">
            @foreach (var price in Model.ExchangePrices.OrderByDescending(x => x.Price))
            {
                <div class="row highlight-on-hover" title="Ask: @ConversionHelper.ToCryptoCurrencyValue(price.Ask), Bid: @ConversionHelper.ToCryptoCurrencyValue(price.Bid)">
                    <div class="col-xs-7">
                        <em>@price.Exchange</em>
                    </div>
                    <div class="col-xs-5">
                        @ConversionHelper.ToCryptoCurrencyValue(price.Price)
                    </div>
                </div>
            }
        </div>
    </td>
    <td msv-absolute-date="@Model.LastUpdated"></td>
    <td>
        @if (Model.Symbol != "BTC")
        {
            <ul class="list-inline">
                <li>
                    <a class="btn btn-xs btn-primary" asp-action="Edit" asp-route-id="@Model.Id" title="Edit coin">
                        <i class="glyphicon glyphicon-edit"></i>
                    </a>
                </li>
                <li>
                    @{
                        var activationButtonTitle = Model.Activity == ActivityState.Active
                            ? "Disable coin"
                            : "Enable coin";
                    }
                    <button class="btn btn-xs btn-info"
                            title="@activationButtonTitle"
                            data-disable-url="@Url.Action("ToggleActive", new {id = Model.Id})">
                        @if (Model.Activity == ActivityState.Active)
                        {
                            <i class="glyphicon glyphicon-remove"></i>
                        }
                        else if (Model.Activity == ActivityState.Inactive)
                        {
                            <i class="glyphicon glyphicon-flash"></i>
                        }
                    </button>
                </li>
                @if (Model.HasLocalNode)
                {
                    <li>
                        <a class="btn btn-xs btn-info" asp-action="CreateConfigFile" asp-route-id="@Model.Id"
                           title="Create configuration file for local node">
                            <i class="fa fa-file-text-o" aria-hidden="true"></i>
                        </a>
                    </li>
                }
                <li>
                    <button class="btn btn-xs btn-danger"
                            title="Delete coin"
                            data-delete-url="@Url.Action("Delete", new {id = Model.Id})">
                        <i class="glyphicon glyphicon-trash"></i>
                    </button>
                </li>
            </ul>
        }
    </td>
</tr>