@using System.Globalization
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.Data
@model Msv.AutoMiner.FrontEnd.Models.Coins.CoinEditModel

@{ ViewBag.Title = "Edit coin details";}    

<h2 class="text-center">Edit coin details</h2>

<div class="text-danger" asp-validation-summary="All"></div>

<form asp-action="Save" method="post">
    <input asp-for="Id" />

    <h3>Basic info</h3>
    <div class="form-group">
        <label asp-for="Symbol">Symbol:</label>
        <input asp-for="Symbol" class="form-control" placeholder="For example, BTC"/>
    </div>
    <div class="form-group">
        <label asp-for="Name">Name:</label>
        <input asp-for="Name" class="form-control" placeholder="For example, BitCoin"/>
    </div>
    <div class="form-group">
        <label asp-for="AlgorithmId">Algorithm:</label>
        <select asp-for="AlgorithmId" class="form-control">
            <option value="" disabled="disabled" selected="@(Model.AlgorithmId == null ? "selected" : "")">Select...</option>
            @foreach (var algorithm in Model.AvailableAlgorithms.OrderBy(x => x.Name))
            {
                <option value="@algorithm.Id">@algorithm.Name</option>
            }
        </select>
    </div>

    <h3>Additional algorithm parameters</h3>
    <div class="form-group">
        <label asp-for="MaxTarget">Max hash target (Bitcoin-like by default):</label>
        <input asp-for="MaxTarget" class="form-control text-monospace" 
               placeholder="For example, 0x00000000FFFF0000000000000000000000000000000000000000000000000000"/>
    </div>

    <h3>Local node parameters</h3>
    <div class="form-group">
        <label asp-for="NodeUrl">Node URL:</label>
        <input asp-for="NodeUrl" class="form-control" placeholder="For example, http://localhost:12345"/>
    </div>
    <div class="form-group">
        <label asp-for="NodeLogin">RPC username:</label>
        <input asp-for="NodeLogin" class="form-control"/>
    </div>
    <div class="form-group">
        <label asp-for="NodePassword">RPC password:</label>
        <input asp-for="NodePassword" class="form-control"/>
    </div>

    <h3>Remote network info provider parameters</h3>
    <div class="form-group">
        <label asp-for="NetworkInfoApiType">Remote API type:</label>
        <select asp-for="NetworkInfoApiType" class="form-control">
            @foreach (var apiType in EnumHelper.GetValues<CoinNetworkInfoApiType>().OrderBy(x => x.ToString()))
            {
                <option value="@apiType">@apiType</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label asp-for="NetworkApiUrl">API URL:</label>
        <input asp-for="NetworkApiUrl" class="form-control"/>
    </div>
    <div class="form-group">
        <label asp-for="NetworkApiName">API coin name:</label>
        <input asp-for="NetworkApiName" class="form-control"/>
    </div>
    
    <h3>Block reward calculation function</h3>
    <p>
        Here you can write JS code to calculate the coin block reward. <br />
        You can use the following variables:
        <dl class="dl-horizontal">
            <dt><code>height</code></dt>
            <dd>current block height</dd>
            <dt><code>difficulty</code></dt>
            <dd>current network difficulty</dd>
            <dt><code>moneySupply</code></dt>
            <dd>current money supply</dd>
            <dt><code>masternodeCount</code></dt>
            <dd>current masternodes count</dd>
        </dl>
        and helper methods:
        <dl class="dl-horizontal">
            <dt><code>halve(value, times)</code></dt>
            <dd>divide <code>value</code> by 2 <code>times</code> times (decimal part truncated)</dd>
        </dl>
        Calculated value should be returned by using the <code>return</code> operator.
    </p>

    <div class="row">
        <div class="col-xs-8">
            <textarea asp-for="RewardCalculationJavaScript"></textarea>
        </div>
        <div class="col-xs-4">
            <h4 class="text-center">Test box</h4>
            <p>Test your code by entering sample argument values: </p>
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleHeightInput">Height:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" id="sampleHeightInput" 
                               value="@Model.LastHeight" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleDifficultyInput">Difficulty:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" id="sampleDifficultyInput" 
                               value="@(Model.LastDifficulty != null ? Model.LastDifficulty.Value.ToString(CultureInfo.InvariantCulture) : "")" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleMoneySupplyInput">Money supply:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" id="sampleMoneySupplyInput" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleMasternodeCountInput">Masternodes:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" id="sampleMasternodeCountInput" />
                    </div>
                </div>            
                <div class="text-center">
                    <button type="button" id="executeTestButton" class="btn btn-lg btn-success">Execute</button>
                </div>
                <p>Result: <span id="rewardCodeResult" class="text-success"></span></p>              
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-success">
        <i class="glyphicon glyphicon-floppy-disk"></i> Save
    </button>
    <a class="btn btn-default" asp-action="Index">
        <i class="glyphicon glyphicon-chevron-left"></i> Return to coins list
    </a>
</form>

@section Scripts {
    <script>
        function halve(value, times) {
            return value / Math.pow(2, times ^ 0);
        }

        $(function() {
            var editor = CodeMirror.fromTextArea(
                document.getElementById("RewardCalculationJavaScript"),
                {
                    mode: "javascript",
                    lineNumbers: true
                });

            $("#executeTestButton").click(function() {
                try {
                    var rewardFunc = new Function("height,difficulty,moneySupply,masternodeCount", editor.getValue());
                    var result = rewardFunc(
                        Number($("#sampleHeightInput").val()),
                        Number($("#sampleDifficultyInput").val()),
                        Number($("#sampleMoneySupplyInput").val()),
                        Number($("#sampleMasternodeCountInput").val()));
                    $("#rewardCodeResult").text(result.toFixed(3));
                } catch (e) {
                    $("#rewardCodeResult").text("");
                    MessageBox.alert("Error!",
                        "warning",
                        "Error happened:\n" +
                        e.name +
                        " - " +
                        e.message +
                        "\n\nLine " +
                        (e.lineNumber - 2) +
                        ", column " +
                        e.columnNumber +
                        "\n\nStack trace:\n" +
                        e.stack);
                }
            });
        });
    </script>
}