@using System.Globalization
@using Msv.AutoMiner.Common.Enums
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.Data
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model Msv.AutoMiner.FrontEnd.Models.Coins.CoinEditModel

@{ ViewBag.Title = "Edit coin details"; }    

<h2 class="text-center">Edit coin details</h2>

<div class="text-danger" asp-validation-summary="All"></div>

<form asp-action="Save" method="post">
    <input asp-for="Id" />

    <h3>Basic info</h3>
    <div class="form-group">
        <label asp-for="Symbol">Symbol (ticker):</label>
        <input asp-for="Symbol" class="form-control" placeholder="For example, BTC" />
    </div>
    <div class="form-group">
        <label asp-for="Name">Name:</label>
        <input asp-for="Name" class="form-control" placeholder="For example, BitCoin" />
    </div>
    <div class="form-group">
        <label asp-for="NewLogoUrl">Logo URL:</label>
        @if (Model.Logo != null && Model.Logo.Any())
        {
            <div>
                Current logo: @await Component.InvokeAsync("LogoCoinName", new LogoCoinNameModel(null, Model.Logo))
                <label>
                    <input asp-for="DeleteLogo" type="checkbox" /> Delete it
                </label>
            </div>
        }
        <input asp-for="NewLogoUrl" class="form-control" placeholder="Input logo URL or leave field blank to keep current one" />
    </div>
    <div class="form-group">
        <label asp-for="AlgorithmId">Algorithm:</label>
        <select asp-for="AlgorithmId" class="form-control">
            <option value="" disabled="disabled" selected="@(Model.AlgorithmId == null ? "selected" : "")">Select...</option>
            @foreach (var algorithm in Model.AvailableAlgorithms.OrderBy(x => x.Name))
            {
                <option value="@algorithm.Id">@algorithm.Name</option>
            }
        </select>
    </div>

    <h3>Wallet address parameters</h3>
    <div class="form-group">
        <label asp-for="AddressFormat">Address format:</label>
        <select asp-for="AddressFormat" class="form-control">
            @foreach (var format in EnumHelper.GetCaptions<AddressFormat>())
            {
                <option value="@format.Key">@format.Value</option>
            }
        </select>
    </div>
    <p class="small">
        Sample: <span id="addressSample" class="text-monospace"></span>
    </p>
    <div class="form-group">
        <label asp-for="AddressPrefixes">Allowed address prefixes (comma-delimited):</label>
        <p class="small">
            For example, BitCoin allows prefixes 1,3 and some other.
            Addresses with the specified prefixes (for example, <span class="text-monospace">1KERj2towSwzRYFLrGp4Lwk7RXCY6B8rtn</span> with prefix 1) and correct checksum will be considered valid.
            You can enter either Base58 symbolic representation of prefix or its numeric (hex) value (in this case put '0x' before it).
        </p>
        <p class="small">
            All acceptable prefixes in numeric form can be found in the <code>chainparams.cpp</code> file, mainnet chain parameters section
            (<a href="https://github.com/bitcoin/bitcoin/blob/5961b23898ee7c0af2626c46d5d70e80136578d3/src/chainparams.cpp#L135">sample</a> for BitCoin).
        </p>
        <input asp-for="AddressPrefixes" class="form-control" placeholder="For example, 1,3 or 0x00,0x05" />
    </div>

    <h3>Additional algorithm parameters</h3>
    <div class="form-group">
        <label asp-for="MaxTarget">Max hash target (Bitcoin-like by default):</label>
        <p class="small">
            Reference <code>GetDifficulty()</code> or similar method in the <code>rpc/blockchain.cpp</code> or <code>rpcblockchain.cpp</code> file
            (<a href="https://github.com/bitcoin/bitcoin/blob/17180fa608100ce1aab3df74c9db17c342c0380d/src/rpc/blockchain.cpp#L53">sample</a> for BitCoin).
            <br />Difficulty is usually defined as <var>maxTarget / currentTarget</var>, so you can easily find <code>maxTarget</code> from this equation.
            <br />You can enter max target value either in full form or in compact one (like nBits).
        </p>
        <input asp-for="MaxTarget" class="form-control text-monospace"
               placeholder="For example, 0x1d00ffff or 0x00000000ffff0000000000000000000000000000000000000000000000000000" />
    </div>

    <h3>Local node parameters</h3>
    <p class="small">
        If you have the running local node for this coin, specify its URL and credentials. It will be used to query the latest network info.
        In case of unavailability the API provider from the next section will be used.
        <br /><i>You will be able to create configuration file for the local wallet based on this data</i>
    </p>
    <div class="form-group">
        <label asp-for="NodeUrl">Node URL:</label>
        <p class="small">The port of this URL corresponds to <code>rpcport</code> field of the config</p>
        <input asp-for="NodeUrl" class="form-control" placeholder="For example, http://localhost:12345" />
    </div>
    <div class="form-group">
        <label asp-for="NodeLogin">RPC username:</label>
        <p class="small">This value corresponds to <code>rpcuser</code> field of the config</p>
        <input asp-for="NodeLogin" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="NodePassword">RPC password:</label>
        <p class="small">This value corresponds to <code>rpcpassword</code> field of the config</p>
        <input asp-for="NodePassword" class="form-control" />
    </div>

    <h3>Remote network info provider parameters</h3>
    <div class="form-group">
        <label asp-for="NetworkInfoApiType">Remote API type:</label>
        <select asp-for="NetworkInfoApiType" class="form-control">
            @foreach (var apiType in EnumHelper.GetCaptions<CoinNetworkInfoApiType>().OrderBy(x => x.Value))
            {
                <option value="@apiType.Key">@apiType.Value</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label asp-for="NetworkApiUrl">API URL:</label>
        <p class="small" id="apiUrlDescription"></p>
        <input asp-for="NetworkApiUrl" class="form-control" />
    </div>
    <div class="form-group">
        <label asp-for="NetworkApiName">API coin name:</label>
        <p class="small" id="apiCoinNameDescription"></p>
        <input asp-for="NetworkApiName" class="form-control" />
    </div>

    <h3>Block reward calculation function</h3>
    <p>
        Here you can write JavaScript code to calculate the coin block reward. <br />
        You can use the following variables:
        <dl class="dl-horizontal">
            <dt><code>height</code></dt>
            <dd>current block height</dd>
            <dt><code>difficulty</code></dt>
            <dd>current network difficulty</dd>
            <dt><code>moneySupply</code></dt>
            <dd>current money supply</dd>
            <dt><code>masternodeCount</code></dt>
            <dd>current masternodes count</dd>
        </dl>
        and helper methods:
        <dl class="dl-horizontal">
            <dt><code>halve(value, times)</code></dt>
            <dd>divide <code>value</code> by 2 <code>times</code> times (decimal part truncated)</dd>
        </dl>
        Calculated value should be returned by using the <code>return</code> operator.
    <p class="small">
        You can leave this textbox empty, in this case reward info will be retreived from the network info provider.
        <em>Remember that most of them don't provide this data, so you can end with zero reward and, consequently, with zero calculated profitability.</em>
    </p>
    </p>

    <div class="row">
        <div class="col-xs-8">
            <textarea asp-for="RewardCalculationJavaScript"></textarea>
        </div>
        <div class="col-xs-4">
            <h4 class="text-center">Test box</h4>
            <p>Test your code by entering sample argument values: </p>
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleHeightInput">Height:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" id="sampleHeightInput"
                               value="@Model.LastHeight" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleDifficultyInput">Difficulty:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" id="sampleDifficultyInput"
                               value="@(Model.LastDifficulty != null ? Model.LastDifficulty.Value.ToString(CultureInfo.InvariantCulture) : "")" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleMoneySupplyInput">Money supply:</label>
                    <div class="col-sm-8">
                        <input type="text" class="form-control" id="sampleMoneySupplyInput" />
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-4 control-label" for="sampleMasternodeCountInput">Masternodes:</label>
                    <div class="col-sm-8">
                        <input type="number" class="form-control" id="sampleMasternodeCountInput" />
                    </div>
                </div>
                <div class="text-center">
                    <button type="button" id="executeTestButton" class="btn btn-lg btn-success">Execute</button>
                </div>
                <p>Result: <span id="rewardCodeResult" class="text-success"></span></p>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-success">
        <i class="glyphicon glyphicon-floppy-disk"></i> Save
    </button>
    <a class="btn btn-default" asp-action="Index">
        <i class="glyphicon glyphicon-chevron-left"></i> Return to coins list
    </a>
</form>

@section Scripts {
    <script>
        function halve(value, times) {
            return value / Math.pow(2, times ^ 0);
        }

        $(function() {
            var editor = CodeMirror.fromTextArea(
                document.getElementById("RewardCalculationJavaScript"),
                {
                    mode: "javascript",
                    lineNumbers: true
                });

            var testFunction = function(success, error) {
                try {
                    var code = editor.getValue();
                    if ($.trim(code) === "")
                        return;
                    var rewardFunc = new Function(
                        "height,difficulty,moneySupply,masternodeCount",
                        code);
                    var result = rewardFunc(
                        Number($("#sampleHeightInput").val()),
                        Number($("#sampleDifficultyInput").val()),
                        Number($("#sampleMoneySupplyInput").val()),
                        Number($("#sampleMasternodeCountInput").val()));
                    success(result);
                } catch (e) {
                    $("#rewardCodeResult").text("");
                    MessageBox.alert("Error in reward calculation!",
                        "warning",
                        format("Error detected in the reward calculation function:\n{0} - {1}\n\nLine {2}, column {3}\n\nStack trace:\n{4}",
                            e.name,
                            e.message,
                            (e.lineNumber - 2),
                            e.columnNumber,
                            e.stack));
                    error();
                }
            }

            $("#executeTestButton").click(function() {
                testFunction(function(result) {
                        $("#rewardCodeResult").text(result.toFixed(3));
                    },
                    function() {});
            });
            $("form").submit(function(e) {
                testFunction(function() {},
                    function() {
                        e.preventDefault();
                    });
            });
        });
    </script>
}