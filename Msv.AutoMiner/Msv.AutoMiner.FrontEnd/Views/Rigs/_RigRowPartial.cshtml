@using Msv.AutoMiner.Common.Data.Enums
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.FrontEnd.Models.Rigs
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model RigDisplayModel

@{
    string rowClass;
    string title;
    if (Model.Activity == ActivityState.Inactive)
    {
        rowClass = "text-muted";
        title = "Rig is inactive";
    }
    else if (Model.CertificateSerial == null)
    {
        rowClass = "warning";
        title = "Certificate for the rig isn't registered";
    }
    else if (Model.LastHeartbeat == null || Model.LastHeartbeat < DateTime.UtcNow - TimeSpan.FromMinutes(10))
    {
        rowClass = "warning";
        title = "Rig data is unavailable or obsolete, no recent heartbeats";
    }
    else
    {
        rowClass = null;
        title = null;
    }

    var aggregationTypes = EnumHelper.GetCaptionsCached<ValueAggregationType>();
}

<tr class="@rowClass" title="@title" data-rig-name="@Model.Name">
    <td>
        <a asp-action="Statistics" asp-route-id="@Model.Id" title="Show statistics">@Model.Name</a>
    </td>
    <td>@Model.RemoteAddress</td>
    <td>@aggregationTypes[Model.DifficultyAggregationType]</td>
    <td>@aggregationTypes[Model.PriceAggregationType]</td>
    <td>
        @await Component.InvokeAsync("LongId", new LongIdModel
        {
            Id = Model.CertificateSerial
        })
    </td>
    <td data-order="@Model.LastHeartbeat.ToDataOrder()" msv-absolute-date="@Model.LastHeartbeat"></td>
    <td>
        <ul class="list-inline">
            <li>
                <a class="btn btn-xs btn-primary" asp-action="Edit" asp-route-id="@Model.Id" title="Edit rig">
                    <i class="glyphicon glyphicon-edit"></i>
                </a>
            </li>
            <li>
                @{
                    var activationButtonTitle = Model.Activity == ActivityState.Active
                        ? "Disable rig"
                        : "Enable rig";
                }
                <button class="btn btn-xs btn-info"
                        title="@activationButtonTitle"
                        data-disable-url="@Url.Action("ToggleActive", new {id = Model.Id})">
                    @if (Model.Activity == ActivityState.Active)
                    {
                        <i class="glyphicon glyphicon-remove"></i>
                    }
                    else if (Model.Activity == ActivityState.Inactive)
                    {
                        <i class="glyphicon glyphicon-flash"></i>
                    }
                </button>
            </li>
            <li>
                <button class="btn btn-xs btn-info"
                        title="Register rig"
                        data-register-url="@Url.Action("CreateRegistrationRequest", new {id = Model.Id})">
                    <i class="fa fa-user-plus" aria-hidden="true"></i>
                </button>
            </li>
            @if (Model.CertificateSerial != null)
            {
                <li>
                    <button class="btn btn-xs btn-danger"
                            title="Revoke rig certificate"
                            data-revoke-certificate-url="@Url.Action("RevokeCertificate", new {id = Model.Id})">
                        <i class="fa fa-user-times" aria-hidden="true"></i>
                    </button>
                </li>
            }
            <li>
                <button class="btn btn-xs btn-danger"
                        title="Delete rig"
                        data-delete-url="@Url.Action("Delete", new {id = Model.Id})">
                    <i class="glyphicon glyphicon-trash"></i>
                </button>
            </li>
        </ul>
    </td>
</tr>