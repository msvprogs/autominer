@using Msv.AutoMiner.Common
@using Msv.AutoMiner.Common.Helpers
@using Msv.AutoMiner.FrontEnd.Models.Shared
@model Msv.AutoMiner.FrontEnd.Models.Rigs.RigStatisticsModel

@{ ViewBag.Title = Model.Name + " rig statistics";}    

<h3>Statistics of rig @Model.Name</h3>
<div class="row">
    <div class="col-xs-5">
        <h4>Current state</h4>
        <div class="text-right">
            Received: <span msv-absolute-date="@Model.LastHeartbeat?.DateTime"></span>
        </div>
        @if (Model.LastHeartbeat != null)
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">System info</h3>
                        </div>
                        <div class="panel-body">
                            Client version: <span class="system-info-value">@Model.LastHeartbeat.ClientVersion</span>
                            <br />
                            OS version: <span class="system-info-value">@Model.LastHeartbeat.OsVersion</span>
                            <br />
                            CPU count: <span class="system-info-value">@Model.LastHeartbeat.CpuStates?.Length</span>
                            <br />
                            Graphic adapters count: <span class="system-info-value">@Model.LastHeartbeat.VideoAdapterStates?.Length</span>
                            <br />
                            Supported algorithms count: <span class="system-info-value">@Model.LastHeartbeat.AlgorithmMiningCapabilities?.Length</span>
                        </div>
                    </div>
                    
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">CPU info</h3>
                        </div>
                        <div class="panel-body">
                            <div class="margined-rows-container">
                                @foreach (var cpuState in Model.LastHeartbeat.CpuStates.EmptyIfNull())
                                {
                                    <div class="row">
                                        <div class="col-xs-5">
                                            <i class="fa fa-microchip" aria-hidden="true"></i> @cpuState.Name
                                        </div>
                                        <div class="col-xs-7">
                                            <i class="fa fa-clock-o" aria-hidden="true" title="Core frequency"></i>
                                            Clock: <span class="system-info-value">@cpuState.ClockMhz.Current / @cpuState.ClockMhz.Reference MHz</span>
                                            @foreach (var coreUtilization in cpuState.CoreUtilizations.Select((x,i) => (index:i+1, value:x)))
                                            {
                                                <br/>
                                                <i class="fa fa-area-chart" aria-hidden="true" title="Utilization"></i>
                                                <span>Core @coreUtilization.index:</span> <span class="system-info-value">@coreUtilization.value%</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">RAM info</h3>
                        </div>
                        <div class="panel-body">
                            <i class="fa fa-microchip" aria-hidden="true" title="Total memory"></i>
                            Total memory: <span class="system-info-value">@Model.LastHeartbeat.MemoryUsageMb.Max.ToString("N2") Mb</span>
                            <br/>
                            <i class="fa fa-microchip" aria-hidden="true" title="Used memory"></i>
                            Used memory: <span class="system-info-value">@Model.LastHeartbeat.MemoryUsageMb.Current.ToString("N2") Mb</span>
                        </div>
                    </div>
                    
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">Graphic adapters info</h3>
                        </div>
                        <div class="panel-body">
                            <div class="text-right">Video driver: @Model.LastHeartbeat.VideoDriverVersion</div>
                            <div class="margined-rows-container">
                                @foreach (var videoState in Model.LastHeartbeat.VideoAdapterStates.EmptyIfNull())
                                {
                                    <div class="row">
                                        <div class="col-xs-5">
                                            <i class="fa fa-television" aria-hidden="true"></i> @videoState.Name
                                            <br />
                                            <small>BIOS: @videoState.BiosVersion</small>
                                        </div>
                                        <div class="col-xs-7">
                                            <i class="fa fa-clock-o" aria-hidden="true" title="Core frequency"></i>
                                            Core: <span class="system-info-value">@videoState.CoreClockMhz.Current / @videoState.CoreClockMhz.Max MHz</span>
                                            <br />
                                            <i class="fa fa-clock-o" aria-hidden="true" title="Memory frequency"></i>
                                            Memory: <span class="system-info-value">@videoState.MemoryClockMhz.Current / @videoState.MemoryClockMhz.Max MHz</span>
                                            <br />
                                            <i class="fa fa-microchip" aria-hidden="true" title="Memory usage"></i>
                                            Mem. usage: <span class="system-info-value">@videoState.MemoryUsageMb.Current / @videoState.MemoryUsageMb.Max Mb</span>
                                            <br />
                                            <i class="fa fa-thermometer" aria-hidden="true" title="Temperature"></i>
                                            Temp.: <span class="system-info-value">@videoState.Temperature.Current°C / @videoState.Temperature.Max°C</span>
                                            <br />
                                            <i class="fa fa-snowflake-o" aria-hidden="true" title="Fan speed"></i>
                                            Fan speed: <span class="system-info-value">@videoState.FanSpeed%</span>
                                            <br />
                                            <i class="fa fa-area-chart" aria-hidden="true" title="Utilization"></i>
                                            Utiliz.: <span class="system-info-value">@videoState.Utilization%</span>
                                            <br />
                                            <i class="fa fa-bolt" aria-hidden="true" title="Power usage"></i>
                                            Power: <span class="system-info-value">@videoState.PowerUsageWatts.Current.ToString("F2") / @videoState.PowerUsageWatts.Max.ToString("F2") W</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                    
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            <h3 class="panel-title">Supported algorithms</h3>
                        </div>
                        <div class="panel-body">
                            <table class="table table-condensed">
                                <tr>
                                    <th>Algorithm</th>
                                    <th>Hashrate</th>
                                    <th>Power usage</th>
                                </tr>
                                @foreach (var algorithmInfo in Model.LastHeartbeat.AlgorithmMiningCapabilities
                                    .EmptyIfNull()
                                    .Join(Model.Algorithms, x => x.AlgorithmId, x => x.Id, (x, y) => (capability:x, algorithm:y))
                                    .OrderBy(x => x.algorithm.Name))
                                {
                                    <tr>
                                        <td>@algorithmInfo.algorithm.Name</td>
                                        <td>@ConversionHelper.ToHashRateWithUnits(algorithmInfo.capability.NetHashRate, algorithmInfo.algorithm.KnownValue)</td>
                                        <td>@algorithmInfo.capability.Power.ToString("F2") W</td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="col-xs-7">
        <h4>Profitability table</h4>
        <div class="text-right">
            Requested: <span msv-absolute-date="@Model.ProfitabilityTableTime"></span>
        </div>
        <table class="table table-bordered table-striped text-small">
            <tr>
                <th>Coin</th>
                <th>Pool name</th>
                <th>Coins/day</th>
                <th>BTC/day</th>
                <th>USD/day</th>
            </tr>
            @foreach (var item in Model.LastProfitabilityTable.OrderByDescending(x => x.UsdPerDay))
            {
                var isNowMining = (Model.LastHeartbeat?.MiningStates
                    .EmptyIfNull()
                    .Any(x => x.CoinId == item.CoinId && x.PoolId == item.PoolId)).GetValueOrDefault();
                var trClass = isNowMining ? "now-mining success" : "";
                <tr class="@trClass">
                    <td class="space-no-wrap">
                        @await Component.InvokeAsync("LogoCoinName", new LogoCoinNameModel(item.CoinName, item.Logo))
                        @if (isNowMining)
                        {
                            <img src="~/images/mining-animation.gif" alt="Mining" height="32" />
                        }
                    </td>
                    <td>@item.PoolName</td>
                    <td>@ConversionHelper.ToCryptoCurrencyValue(item.CoinsPerDay)</td>
                    <td>@ConversionHelper.ToCryptoCurrencyValue(item.BtcPerDay)</td>
                    <td>@item.UsdPerDay.ToString("N2")</td>
                </tr>
            }
        </table>

        <h4>Last day activity</h4>
        <table class="table table-bordered table-striped">
            <tr>
                <th>Time</th>
                <th>Mining coin symbols</th>
                <th>Mining coin names</th>
                <th>Duration</th>
            </tr>
            @foreach (var item in Model.LastDayActivity.OrderBy(x => x.Time))
            {
                <tr>
                    <td>@item.Time.ToString("HH:mm:ss") GMT</td>
                    <td>@item.CoinSymbol</td>
                    <td>@item.CoinName</td>
                    <td>@item.Duration.Hours hours, @item.Duration.Minutes minutes, @item.Duration.Seconds seconds</td>
                </tr>
            }
        </table>
    </div>
</div>